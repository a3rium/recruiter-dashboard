// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum PROSPECT_STATUS {
  OPEN
  OFFERED
  JOINED
  CANCELLED
}

enum EMPLOYEE_STATUS {
  PROSPECT
  CURRENT
  FIRED
  RESIGNED
}

enum OFFER_STATUS {
  SENT
  REJECTED
  ACCEPTED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  employee      Employee?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  empCode          String?          @unique
  status           EMPLOYEE_STATUS?
  Request          Request[]
  pastProspect     Prospect?        @relation("employee")
  managedProspects Prospect[]       @relation("recruiter")
  Interview        Interview[]
  User             User?            @relation(fields: [userId], references: [id])
  userId           String?          @unique
  Offer            Offer[]
}

// investigate the need for multiple employee level models
model Customer {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Request Request[]
}

model Department {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Request Request[]
}

model Request {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  position     String
  level        String
  budgetValue  Int?
  budgetOpen   Boolean?
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int
  requester    Employee   @relation(fields: [requesterId], references: [id])
  requesterId  Int
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  Prospect     Prospect[]
}

model Prospect {
  id          Int             @id @default(autoincrement())
  firstName   String
  lastName    String
  source      String?
  joinedAt    DateTime?
  recruiter   Employee        @relation("recruiter", fields: [recruiterId], references: [id])
  recruiterId Int
  request     Request         @relation(fields: [requestId], references: [id])
  requestId   Int
  status      PROSPECT_STATUS @default(OPEN)
  interview   Interview[]
  employee    Employee?       @relation("employee", fields: [employeeId], references: [id])
  employeeId  Int?            @unique
  Offer       Offer[]
}

model Interview {
  id           Int        @id @default(autoincrement())
  conductedAt  DateTime
  remarks      String?
  prospect     Prospect   @relation(fields: [prospectId], references: [id])
  prospectId   Int
  interviewers Employee[]
}

model Offer {
  id          Int          @id @default(autoincrement())
  ctcValue    Int
  status      OFFER_STATUS @default(SENT)
  offeredAt   DateTime     @default(now())
  respondedAt DateTime?
  offeredBy   Employee     @relation(fields: [employeeId], references: [id])
  employeeId  Int
  offeredTo   Prospect     @relation(fields: [prospectId], references: [id])
  prospectId  Int
}
